---
name: CI Pipeline

"on":
    push:
        branches: ["*"]
    pull_request:
        branches: [main]

permissions:
    packages: write
    contents: read
    actions: read

env:
    PYTHON_VERSION: "3.12"
    ARTIFACTS_DIR: "artifacts"

jobs:
    setup:
        name: Setup Environment
        uses: ./.github/workflows/setup-environment.yml
        with:
            python-version: "3.12"
            artifacts-dir: "artifacts"

    # Main branch workflow - run all checks
    format_main:
        name: Check Code Formatting (Main)
        if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request' && github.base_ref == 'main'
        needs: setup
        uses: ./.github/workflows/format.yml
        with:
            python-version: "3.12"
            artifacts-dir: "artifacts"

    lint_main:
        name: Run Code Linting (Main)
        if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request' && github.base_ref == 'main'
        needs: setup
        uses: ./.github/workflows/lint.yml
        with:
            python-version: "3.12"
            artifacts-dir: "artifacts"

    type_check_main:
        name: Run Type Checking (Main)
        if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request' && github.base_ref == 'main'
        needs: setup
        uses: ./.github/workflows/type-check.yml
        with:
            python-version: "3.12"
            artifacts-dir: "artifacts"

    docstring_check_main:
        name: Check Documentation Strings (Main)
        if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request' && github.base_ref == 'main'
        needs: setup
        uses: ./.github/workflows/docstring-check.yml
        with:
            python-version: "3.12"
            artifacts-dir: "artifacts"

    pre_commit_all_main:
        name: Run All Pre-commit Hooks (Main)
        if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request' && github.base_ref == 'main'
        needs: setup
        uses: ./.github/workflows/pre-commit-all.yml
        with:
            python-version: "3.12"
            artifacts-dir: "artifacts"

    tests_main:
        name: Run Tests (Main)
        if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request' && github.base_ref == 'main'
        needs: setup
        uses: ./.github/workflows/tests.yml
        with:
            python-version: "3.12"
            artifacts-dir: "artifacts"
            skip-coverage: "false"

    # Different workflow for other branches (not main)
    format_branch:
        name: Check Code Formatting (Branch)
        if: github.ref != 'refs/heads/main' && !(github.event_name == 'pull_request' && github.base_ref == 'main')
        needs: setup
        uses: ./.github/workflows/format.yml
        with:
            python-version: "3.12"
            artifacts-dir: "artifacts"

    lint_branch:
        name: Run Code Linting (Branch)
        if: github.ref != 'refs/heads/main' && !(github.event_name == 'pull_request' && github.base_ref == 'main')
        needs: setup
        uses: ./.github/workflows/lint.yml
        with:
            python-version: "3.12"
            artifacts-dir: "artifacts"

    type_check_branch:
        name: Run Type Checking (Branch)
        if: github.ref != 'refs/heads/main' && !(github.event_name == 'pull_request' && github.base_ref == 'main')
        needs: setup
        uses: ./.github/workflows/type-check.yml
        with:
            python-version: "3.12"
            artifacts-dir: "artifacts"

    # Test without coverage for non-main branches
    tests_branch:
        name: Run Tests Without Coverage (Branch)
        if: github.ref != 'refs/heads/main' && !(github.event_name == 'pull_request' && github.base_ref == 'main')
        needs: setup
        uses: ./.github/workflows/tests.yml
        with:
            python-version: "3.12"
            artifacts-dir: "artifacts"
            skip-coverage: "true"

    # Security scanning
    security_scan:
        name: Security Scan
        if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request' && github.base_ref == 'main'
        runs-on: ubuntu-22.04
        needs: setup
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Run Trivy vulnerability scanner
              uses: aquasecurity/trivy-action@master
              with:
                  scan-type: "fs"
                  scan-ref: "."
                  format: "sarif"
                  output: "trivy-results.sarif"

            - name: Upload Trivy scan results to GitHub Security tab
              uses: github/codeql-action/upload-sarif@v3
              if: always()
              with:
                  sarif_file: "trivy-results.sarif"

    # Build and push Docker for main branch or PR to main
    docker_main:
        name: Build and Push Docker Image (Main)
        if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request' && github.base_ref == 'main'
        needs:
            [
                format_main,
                lint_main,
                type_check_main,
                docstring_check_main,
                pre_commit_all_main,
                tests_main,
                security_scan,
            ]
        uses: ./.github/workflows/docker.yml
        with:
            build-type: "main"

    # Build and push Docker for other branches
    docker_branch:
        name: Build and Push Docker Image (Branch)
        if: github.ref != 'refs/heads/main' && !(github.event_name == 'pull_request' && github.base_ref == 'main')
        needs: [format_branch, lint_branch, type_check_branch, tests_branch]
        uses: ./.github/workflows/docker.yml
        with:
            build-type: "branch"
            branch-name: ${{ github.ref_name }}

    # Final status check
    ci_success:
        name: CI Pipeline Success
        runs-on: ubuntu-22.04
        if: always()
        needs: [docker_main, docker_branch]
        steps:
            - name: Check CI status
              run: |
                  if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
                      echo "❌ CI Pipeline failed"
                      exit 1
                  elif [[ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
                      echo "⚠️ CI Pipeline was cancelled"
                      exit 1
                  else
                      echo "✅ CI Pipeline completed successfully"
                  fi
