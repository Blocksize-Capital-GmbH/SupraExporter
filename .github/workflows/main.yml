---
name: CI Pipeline

"on":
    push:
        branches: [main, develop]
    pull_request:
        branches: [main, develop]

permissions:
    packages: write
    contents: read
    actions: read

env:
    PYTHON_VERSION: '3.12'

jobs:
    install:
        name: Install Dependencies
        runs-on: ubuntu-22.04
        steps:
            - name: Checkout repository code
              uses: actions/checkout@v4

            - name: Setup Python environment
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - name: Install Poetry
              run: |
                  python -m pip install --upgrade pip
                  pip install poetry

            - name: Configure Poetry for in-project virtual environment
              run: |
                  poetry config virtualenvs.in-project true
                  poetry config virtualenvs.create true
                  poetry config --list

            - name: Cache Poetry dependencies
              uses: actions/cache@v4
              with:
                  path: ~/.cache/pypoetry
                  key: >-
                      poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
                  restore-keys: |
                      poetry-${{ runner.os }}-

            - name: Install project dependencies and create virtual environment
              run: |
                  cp .env.example .env
                  poetry install -vv --no-root
                  
            - name: Verify virtual environment and prepare for upload
              run: |
                  echo "Current working directory: $(pwd)"
                  echo "Checking for .venv directory..."
                  if [ -d ".venv" ]; then
                      echo "✓ .venv directory found"
                      ls -la .venv/
                      echo "Virtual environment size:"
                      du -sh .venv/
                      echo "Absolute path to .venv: $(realpath .venv)"
                      echo "Directory permissions:"
                      ls -ld .venv
                      echo "Contents accessible test:"
                      ls .venv/bin/ | head -5
                  else
                      echo "✗ .venv directory not found"
                      echo "Poetry environment info:"
                      poetry env info
                      echo "Looking for virtual environments..."
                      find /tmp -name "*venv*" -type d 2>/dev/null || true
                      find /home/runner -name "*venv*" -type d 2>/dev/null || true
                      exit 1
                  fi
                  
                  # Pre-upload verification
                  echo "Final verification before upload:"
                  ls -la .venv/
                  echo "Working directory contents:"
                  ls -la .

            - name: Upload virtual environment artifact
              uses: actions/upload-artifact@v4
              with:
                  name: poetry-venv-${{ github.run_id }}
                  path: |
                      .venv/
                  retention-days: 1
                  if-no-files-found: error

    tests:
        name: Run Tests
        runs-on: ubuntu-22.04
        needs: install
        steps:
            - name: Checkout repository code
              uses: actions/checkout@v4

            - name: Setup Python environment
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - name: Download virtual environment artifact
              uses: actions/download-artifact@v4
              with:
                  name: poetry-venv-${{ github.run_id }}
                  path: .venv

            - name: Restore virtual environment permissions
              run: |
                  chmod -R +x .venv/bin/

            - name: Setup project environment
              run: cp .env.example .env

            - name: Verify virtual environment
              run: |
                  echo "Virtual environment contents:"
                  ls -la .venv/bin/
                  ./.venv/bin/python --version

            - name: Run test suite with coverage
              run: >-
                  ./.venv/bin/python -m pytest supraexporter/tests/ -v
                  --cov=supraexporter --cov-report=xml --cov-report=term-missing

            - name: Upload coverage reports to Codecov
              uses: codecov/codecov-action@v3
              with:
                  file: ./coverage.xml
                  flags: unittests
                  name: codecov-umbrella

    format:
        name: Check Code Formatting
        runs-on: ubuntu-22.04
        needs: install
        steps:
            - name: Checkout repository code
              uses: actions/checkout@v4

            - name: Setup Python environment
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - name: Download virtual environment artifact
              uses: actions/download-artifact@v4
              with:
                  name: poetry-venv-${{ github.run_id }}
                  path: .venv

            - name: Restore virtual environment permissions
              run: |
                  chmod -R +x .venv/bin/

            - name: Run formatting checks
              run: >-
                  ./.venv/bin/python -m black --check supraexporter/ &&
                  ./.venv/bin/python -m isort --check-only supraexporter/

    lint:
        name: Run Code Linting
        runs-on: ubuntu-22.04
        needs: install
        steps:
            - name: Checkout repository code
              uses: actions/checkout@v4

            - name: Setup Python environment
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - name: Download virtual environment artifact
              uses: actions/download-artifact@v4
              with:
                  name: poetry-venv-${{ github.run_id }}
                  path: .venv

            - name: Restore virtual environment permissions
              run: |
                  chmod -R +x .venv/bin/

            - name: Setup project environment
              run: cp .env.example .env

            - name: Run linting checks
              run: |
                  ./.venv/bin/python -m pre_commit run black --all-files
                  ./.venv/bin/python -m pre_commit run isort --all-files
                  ./.venv/bin/python -m pre_commit run flake8 --all-files
                  ./.venv/bin/python -m pre_commit run codespell --all-files

    type-check:
        name: Run Type Checking
        runs-on: ubuntu-22.04
        needs: install
        continue-on-error: true
        steps:
            - name: Checkout repository code
              uses: actions/checkout@v4

            - name: Setup Python environment
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - name: Download virtual environment artifact
              uses: actions/download-artifact@v4
              with:
                  name: poetry-venv-${{ github.run_id }}
                  path: .venv

            - name: Restore virtual environment permissions
              run: |
                  chmod -R +x .venv/bin/

            - name: Setup project environment
              run: cp .env.example .env

            - name: Run static type checking
              run: >-
                  ./.venv/bin/python -m mypy --ignore-missing-imports
                  supraexporter/

    docstring-check:
        name: Check Documentation Strings
        runs-on: ubuntu-22.04
        needs: install
        continue-on-error: true
        steps:
            - name: Checkout repository code
              uses: actions/checkout@v4

            - name: Setup Python environment
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - name: Download virtual environment artifact
              uses: actions/download-artifact@v4
              with:
                  name: poetry-venv-${{ github.run_id }}
                  path: .venv

            - name: Restore virtual environment permissions
              run: |
                  chmod -R +x .venv/bin/

            - name: Setup project environment
              run: cp .env.example .env

            - name: Run docstring style checks
              run: |
                  ./.venv/bin/python -m pydocstyle supraexporter/

    docker:
        name: Build and Test Docker Image
        runs-on: ubuntu-22.04
        steps:
            - name: Checkout repository code
              uses: actions/checkout@v4

            - name: Setup Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Build Docker image
              run: |
                  docker build -t supraexporter:test .

            - name: Test Docker image functionality
              run: >-
                  docker run --rm supraexporter:test python -c
                  "import supraexporter; print('Docker build successful')"
